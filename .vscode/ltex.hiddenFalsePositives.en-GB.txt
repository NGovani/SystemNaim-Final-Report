{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qholda = hls_test_func_a(h, n/2); holdb = hls_test_func_b(h, (n/2 - 1));\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_GB","sentence":"^\\Qholda = hls_test_func_a(h, n/2); holdb = hls_test_func_b(h, (n/2 - 1)); holda = hls_test_func_a(h, n/2); holdb = hls_test_func_b(h, (n/2 - 1));\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qholda = hls_test_func_a(h, n/2); holdb = hls_test_func_b(h, (n/2 - 1)); holda = hls_test_func_a(h, n/2); holdb = hls_test_func_b(h, (n/2 - 1));\\E$"}
{"rule":"WORD_CONTAINS_UNDERSCORE","sentence":"^\\QNote: The first function in a “split_fpga”\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qsplit_fpga holda = <0>hls_test_func_a(h, n); holdb = <1>hls_test_func_b(h, n); holdc = <2>hls_test_func_c(h, n); holdd = <3>hls_test_func_d(h, n); Method of allowing user to dictate which child FPGA a function is called on\\E$"}
{"rule":"WHETHER","sentence":"^\\QWhen allowing for systems with 3+ FPGAs a decision has to be made as to whether the user should decide which off-chip functions go on which child FPGA.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_GB","sentence":"^\\Qsplit_FPGA holda = <0>hls_test_func_a(h, n); holdb = <1>hls_test_func_b(h, n); holdc = <2>hls_test_func_c(h, n); holdd = <3>hls_test_func_d(h, n); Method of allowing user to dictate which child FPGA a function is called on\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_GB","sentence":"^\\Qsplit_fpga holda = <0>hls_test_func_a(h, n); holdb = <1>hls_test_func_b(h, n); holdc = <2>hls_test_func_c(h, n); holdd = <3>hls_test_func_d(h, n); Method of allowing user to dictate which child FPGA a function is called on\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qfor(i = 0; i < 20; i = i + 1) // Some code \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q assignment1: begin state <= forCondExpr2; end forCondExpr2: begin state <= forBranch3; end forBranch3: begin state <= forCond1 ?\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qx = func(3, 5); \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q func func0( .clk(clk), .clk_en(clk_en), .reset(reset), .a(a0), .b(b0), .start(func_start0), .done(func_done0), .d_out(func_out0) ); Module Instantiation: Function Call converted by SystemNaim\\E$"}
